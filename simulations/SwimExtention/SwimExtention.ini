[General]
scheduler-class = "cSocketRTScheduler"
num-rngs = 10
network = SwimExtention
result-dir = /home/ashutosp/swimExtension/Experiments/Results/${network}

warmup-period = 900s
sim-time-limit = 6300s

#*.source.interArrivalsFile = ${trace = "/home/ashutosp/swimExtension/Experiments/Traces/wc_day_58_fixed_105_23.delta"}
*.source.interArrivalsFile = "/home/ashutosp/swimExtended/swim/simulations/SwimExtention/Traces/wc_day_58_fixed_105_23.delta"

#*.usePredictor = true
*.initialServersA = 1
#*.initialServersB = 1
#*.initialServersC = 1
*.maxServersA = 1
*.maxServersB = 1
*.maxServersC = 1
*.bootDelay = ${120}
*.numberOfBrownoutLevels = 3
*.evaluationPeriod = 60
*.penalty = -0.25
*.responseTimeThreshold = 1.00
*.serverA_cost_sec = 1.0
*.serverB_cost_sec = 0.7
*.serverC_cost_sec = 0.5
*.pathToLoggingDir = "/home/ashutosp/swimExtended/swim/simulations/SwimExtention/logs"
*.mode = "Hybrid"

*.max_arrival_capacity_C = 100
*.max_arrival_capacity_low_C = 200
*.max_arrival_capacity_B = 140
*.max_arrival_capacity_low_B = 280
*.max_arrival_capacity_A = 200
*.max_arrival_capacity_low_A = 400

**.server_C_*.server.serviceTime = truncnormal(0.01s, 0.0005446312s)
**.server_C_*.server.lowFidelityServiceTime = truncnormal(0.005s,0.0005446312s)
**.server_B_*.server.serviceTime = truncnormal(0.007s,0.0005446312s)
**.server_B_*.server.lowFidelityServiceTime = truncnormal(0.00357s,0.0005446312s)
**.server_A_*.server.serviceTime = truncnormal(0.005s,0.0005446312s)
**.server_A_*.server.lowFidelityServiceTime = truncnormal(0.0025s,0.0005446312s)

*.normal_revenue_A = (serverA_cost_sec / max_arrival_capacity_A) * 10
*.dimmer_revenue_A = (serverA_cost_sec / max_arrival_capacity_low_A) * 3 / 2
*.normal_revenue_B = (serverB_cost_sec / max_arrival_capacity_B) * 10
*.dimmer_revenue_B = (serverB_cost_sec / max_arrival_capacity_low_B) * 3 / 2
*.normal_revenue_C = (serverC_cost_sec / max_arrival_capacity_C) * 10
*.dimmer_revenue_C = (serverC_cost_sec / max_arrival_capacity_low_C) * 3 / 2

# non-default statistics rercording
*.initialServers.param-record-as-scalar = true
*.maxServers.param-record-as-scalar = true
*.bootDelay.param-record-as-scalar = true
*.numberOfBrownoutLevels.param-record-as-scalar = true
*.evaluationPeriod.param-record-as-scalar = true
*.adaptationManager.decisionTime.result-recording-modes = +vector

#*.loadBalancer.routingAlgorithm = "probDist"

# server config
**.server*.server.threads = 1000
**.server*.server.brownoutFactor = 0.0
**.server*.server.timeout = 10s

[Config sim]
